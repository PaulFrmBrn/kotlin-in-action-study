/**
 * @author paul
 */
fun main(args: Array<String>) {

    println("universal object methods")

    // toString()
    println("toString()")
    println(Client("Foo",1).toString())
    println(ClientOverride("Foo",1).toString()) // using overrided toString

    // equals()
    println("equals()")
    println(Client("Foo",1) == Client("Foo",1))
    // in Kotlin '==' calls equals() under the hood
    println(ClientOverride("Foo",1) == ClientOverride("Foo",1))
    // and '===' works like Java's '==' - for reference equality
    println(ClientOverride("Foo",1) === ClientOverride("Foo",1))

    // hashCode()
    println("hashCode()")
    println(hashSetOf(Client("Bar",2)).contains(Client("Bar",2)))
    println(hashSetOf(ClientOverride("Bar",2)).contains(ClientOverride("Bar",2)))

}

class Client(val name: String, val postCode: Int)

class ClientOverride(val name: String, val postCode: Int) {

    // generated by Idea
    override fun toString(): String {
        return "ClientOverride(name='$name', postCode=$postCode)"
    }

    // manually written
    override fun equals(other: Any?): Boolean {
        if (other == null || other !is ClientOverride) return false // smart cast Any? to ClientOverride
        return this.name == other.name && this.postCode == other.postCode
    }

    // generated by Idea
    override fun hashCode(): Int {
        var result = name.hashCode()
        result = 31 * result + postCode
        return result
    }

}